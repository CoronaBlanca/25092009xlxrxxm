-- Galaxy Hub (estilo Lunar Hub) - Versión avanzada
-- Compatible con Delta / Fluxus / Arceus X / Hydrogen...
-- Hecho con Instance.new y TweenService. Sin libs externas.

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- ================= CONFIG (edítalo aquí) =================
local DISCORD_LINK = "https://discord.gg/zYrg2qPjTp"

local UPDATES_TEXT = [[
⭐ Bienvenido a Galaxy Hub!

- Aquí puedes escribir tus notas o actualizaciones directamente en el script.
- Ejemplo:
  • Se agregó sistema de rebirths.
  • Mejoras visuales.
  • Correcciones de bugs.

(Desliza para ver más...)
]]

-- Nombres de botones
local LIB_BUTTONS = {"Elerium", "Fluent", "Tottack", "Galaxy"}

-- Aquí colocas el código que quieres ejecutar por cada botón.
-- Puedes usar 1) una función, o 2) una string con código y se ejecutará con loadstring.
-- Ejemplos (reemplaza el contenido de cada índice con tu script):
local LIB_SCRIPTS = {
    -- 1) Ejemplo con función:
    function()
        -- Ejemplo: print; reemplaza con tu script
        print("Elerium script ejecutado")
        -- Si tu script usa loadstring, puedes llamarlo aquí.
    end,

    -- 2) Ejemplo con string (se cargará con loadstring):
    [[
    -- Fluent script (ejemplo)
    print("Fluent script ejecutado")
    ]],

    -- 3) Otro ejemplo como función
    function()
        print("Tottack script ejecutado")
    end,

    -- 4) Como string
    [[
    print("Galaxy script ejecutado")
    ]]
}
-- ========================================================

-- Helper crear instancias
local function new(class, props)
    local obj = Instance.new(class)
    if props then for k,v in pairs(props) do obj[k] = v end end
    return obj
end

-- Colores (estilo Lunar Hub)
local Colors = {
    BG = Color3.fromRGB(18,14,26),
    Panel = Color3.fromRGB(22,18,36),
    Accent = Color3.fromRGB(130,90,200),
    LightText = Color3.fromRGB(200,180,255),
    ButtonHover = Color3.fromRGB(160,120,230)
}

-- Guarda referencias
local gui = {}

-- Crear UI
local function createUI()
    -- eliminar si ya existe (evita duplicados)
    local existing = PlayerGui:FindFirstChild("GalaxyHub_UI")
    if existing then existing:Destroy() end

    local screenGui = new("ScreenGui", {Name = "GalaxyHub_UI", ResetOnSpawn = false, ZIndexBehavior = Enum.ZIndexBehavior.Sibling})
    screenGui.Parent = PlayerGui
    gui.screenGui = screenGui

    -- overlay oscuro
    local overlay = new("ImageButton", {
        Name = "Overlay",
        Parent = screenGui,
        BackgroundColor3 = Color3.new(0,0,0),
        BackgroundTransparency = 0.6,
        Size = UDim2.new(1,0,1,0),
        Position = UDim2.new(0,0,0,0),
        AutoButtonColor = false,
    })
    overlay.Image = ""
    overlay.ZIndex = 1
    gui.overlay = overlay

    -- main frame centrado
    local main = new("Frame", {
        Name = "Main",
        Parent = screenGui,
        AnchorPoint = Vector2.new(0.5,0.5),
        Position = UDim2.new(0.5,0,0.5,0),
        Size = UDim2.new(0,720,0,380),
        BackgroundColor3 = Colors.Panel,
        BorderSizePixel = 0,
        ZIndex = 2,
    })
    main.ClipsDescendants = true
    new("UICorner", {Parent = main, CornerRadius = UDim.new(0,14)})
    new("UIStroke", {Parent = main, Color = Colors.Accent, Thickness = 1.5, Transparency = 0.35})
    gui.main = main

    -- Header
    local header = new("Frame", {
        Name = "Header",
        Parent = main,
        BackgroundTransparency = 1,
        Size = UDim2.new(1,0,0,48),
        Position = UDim2.new(0,0,0,0)
    })
    local title = new("TextLabel", {
        Parent = header,
        BackgroundTransparency = 1,
        Position = UDim2.new(0.02,0,0,8),
        Size = UDim2.new(0.6,0,1,0),
        Text = "Galaxy Hub",
        Font = Enum.Font.GothamBold,
        TextSize = 20,
        TextColor3 = Colors.LightText,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    -- X cerrar
    local closeBtn = new("TextButton", {
        Name = "CloseBtn",
        Parent = header,
        AnchorPoint = Vector2.new(1,0),
        Position = UDim2.new(0.98,0,0,6),
        Size = UDim2.new(0,36,0,36),
        BackgroundTransparency = 0,
        AutoButtonColor = false,
        BackgroundColor3 = Color3.fromRGB(255,255,255),
        Text = "✕",
        Font = Enum.Font.GothamBold,
        TextSize = 18,
        TextColor3 = Colors.LightText
    })
    new("UICorner", {Parent = closeBtn, CornerRadius = UDim.new(0,8)})
    new("UIStroke", {Parent = closeBtn, Color = Colors.Accent, Thickness = 1})
    gui.closeBtn = closeBtn

    -- Content frame (3 columnas)
    local content = new("Frame", {Parent = main, BackgroundTransparency = 1, Position = UDim2.new(0,0,0,48), Size = UDim2.new(1,0,1,-48)})
    gui.content = content

    local colWidth = 1/3

    -- ================= Galaxy Updates =================
    local updatesFrame = new("Frame", {
        Parent = content,
        BackgroundColor3 = Colors.BG,
        Position = UDim2.new(0,18,0,18),
        Size = UDim2.new(colWidth, -30, 1, -36),
        BorderSizePixel = 0
    })
    new("UICorner", {Parent = updatesFrame, CornerRadius = UDim.new(0,12)})
    new("UIStroke", {Parent = updatesFrame, Color = Colors.Accent, Thickness = 1})

    new("TextLabel", {
        Parent = updatesFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0,12,0,8),
        Size = UDim2.new(1,-24,0,26),
        Text = "Galaxy Updates",
        Font = Enum.Font.GothamBold,
        TextSize = 16,
        TextColor3 = Colors.LightText,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    local scroll = new("ScrollingFrame", {
        Parent = updatesFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0,10,0,40),
        Size = UDim2.new(1,-20,1,-50),
        CanvasSize = UDim2.new(0,0,0,0),
        ScrollBarThickness = 6
    })
    new("UICorner", {Parent = scroll, CornerRadius = UDim.new(0,8)})
    local contentHolder = new("Frame", {Parent = scroll, BackgroundTransparency = 1, Size = UDim2.new(1,0,0,0)})
    contentHolder.Name = "ContentHolder"

    local updatesLabel = new("TextLabel", {
        Parent = contentHolder,
        Name = "UpdatesLabel",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -6, 0, 10),
        Position = UDim2.new(0,0,0,0),
        Text = UPDATES_TEXT,
        Font = Enum.Font.Gotham,
        TextSize = 14,
        TextWrapped = true,
        TextYAlignment = Enum.TextYAlignment.Top,
        TextColor3 = Colors.LightText
    })

    updatesLabel:GetPropertyChangedSignal("TextBounds"):Connect(function()
        local tb = updatesLabel.TextBounds
        updatesLabel.Size = UDim2.new(1, -6, 0, tb.Y + 8)
        contentHolder.Size = UDim2.new(1,0,0, tb.Y + 12)
        scroll.CanvasSize = UDim2.new(0,0,0, tb.Y + 14)
    end)

    -- ================= Librarys (botones) =================
    local libFrame = new("Frame", {
        Parent = content,
        BackgroundColor3 = Colors.BG,
        Position = UDim2.new(colWidth, 0, 0, 18),
        Size = UDim2.new(colWidth, -18, 1, -36),
        BorderSizePixel = 0
    })
    new("UICorner", {Parent = libFrame, CornerRadius = UDim.new(0,12)})
    new("UIStroke", {Parent = libFrame, Color = Colors.Accent, Thickness = 1})

    new("TextLabel", {
        Parent = libFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0,12,0,8),
        Size = UDim2.new(1,-24,0,26),
        Text = "Librarys",
        Font = Enum.Font.GothamBold,
        TextSize = 16,
        TextColor3 = Colors.LightText,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    local btnContainer = new("Frame", {Parent = libFrame, BackgroundTransparency = 1, Position = UDim2.new(0,10,0,46), Size = UDim2.new(1,-20,1,-56)})
    btnContainer.Name = "BtnContainer"

    local btnHeight = 48
    local spacing = 12

    for i, name in ipairs(LIB_BUTTONS) do
        local yPos = (i-1) * (btnHeight + spacing)
        local b = new("TextButton", {
            Parent = btnContainer,
            Name = "Btn_"..name,
            Position = UDim2.new(0,0,0,yPos),
            Size = UDim2.new(1,0,0,btnHeight),
            BackgroundColor3 = Color3.fromRGB(28,24,44),
            AutoButtonColor = false,
            Text = name,
            Font = Enum.Font.GothamBold,
            TextSize = 16,
            TextColor3 = Colors.LightText
        })
        new("UICorner", {Parent = b, CornerRadius = UDim.new(0,10)})
        new("UIStroke", {Parent = b, Color = Colors.Accent, Thickness = 1})

        b.MouseEnter:Connect(function()
            TweenService:Create(b, TweenInfo.new(0.18, Enum.EasingStyle.Quad), {BackgroundColor3 = Colors.ButtonHover}):Play()
        end)
        b.MouseLeave:Connect(function()
            TweenService:Create(b, TweenInfo.new(0.18, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(28,24,44)}):Play()
        end)

        -- Conexión: al click -> cerrar UI con animación y luego ejecutar script correspondiente
        b.MouseButton1Click:Connect(function()
            -- cerrar UI y ejecutar script en callback
            local idx = i
            local funcToRun = LIB_SCRIPTS[idx]
            -- animamos cierre y luego ejecutamos
            if gui and gui.animateClose then
                gui.animateClose(function()
                    -- ejecutar script con 'pcall' seguro
                    if type(funcToRun) == "function" then
                        local ok, err = pcall(funcToRun)
                        if not ok then warn("Script error (function):", err) end
                    elseif type(funcToRun) == "string" then
                        local ok, res = pcall(function()
                            local f, e = loadstring(funcToRun)
                            if not f then error(e) end
                            return f()
                        end)
                        if not ok then warn("Script error (string):", res) end
                    else
                        warn("No script assigned to button:", name)
                    end
                end)
            else
                -- fallback: destroy and run
                if gui.screenGui then gui.screenGui:Destroy() end
                if type(funcToRun) == "function" then pcall(funcToRun) end
                if type(funcToRun) == "string" then pcall(function() loadstring(funcToRun)() end) end
            end
        end)
    end

    -- ================= Discord (copy) =================
    local discordFrame = new("Frame", {
        Parent = content,
        BackgroundColor3 = Colors.BG,
        Position = UDim2.new(colWidth*2, 0, 0, 18),
        Size = UDim2.new(colWidth, -18, 1, -36),
        BorderSizePixel = 0
    })
    new("UICorner", {Parent = discordFrame, CornerRadius = UDim.new(0,12)})
    new("UIStroke", {Parent = discordFrame, Color = Colors.Accent, Thickness = 1})

    new("TextLabel", {
        Parent = discordFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0,12,0,8),
        Size = UDim2.new(1,-24,0,26),
        Text = "Discord",
        Font = Enum.Font.GothamBold,
        TextSize = 16,
        TextColor3 = Colors.LightText,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    local copyBtn = new("TextButton", {
        Parent = discordFrame,
        Name = "CopyBtn",
        Position = UDim2.new(0,12,0,46),
        Size = UDim2.new(1,-24,0,44),
        BackgroundColor3 = Color3.fromRGB(28,24,44),
        Text = "📋 Copy Discord",
        Font = Enum.Font.GothamBold,
        TextSize = 16,
        TextColor3 = Colors.LightText,
        AutoButtonColor = false
    })
    new("UICorner", {Parent = copyBtn, CornerRadius = UDim.new(0,10)})
    new("UIStroke", {Parent = copyBtn, Color = Colors.Accent, Thickness = 1})

    copyBtn.MouseEnter:Connect(function()
        TweenService:Create(copyBtn, TweenInfo.new(0.18, Enum.EasingStyle.Quad), {BackgroundColor3 = Colors.ButtonHover}):Play()
    end)
    copyBtn.MouseLeave:Connect(function()
        TweenService:Create(copyBtn, TweenInfo.new(0.18, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(28,24,44)}):Play()
    end)

    copyBtn.MouseButton1Click:Connect(function()
        local ok = pcall(function() setclipboard(DISCORD_LINK) end)
        local old = copyBtn.Text
        if ok then
            copyBtn.Text = "Copied!"
        else
            copyBtn.Text = "Copy failed"
        end
        delay(1.2, function()
            if copyBtn.Parent then copyBtn.Text = old end
        end)
    end)

    -- guardar refs
    gui.screenGui = screenGui
    gui.overlay = overlay
    gui.main = main
    gui.closeBtn = closeBtn
    gui.copyBtn = copyBtn

    -- ================= Scanline bars (para la animación) =================
    -- Creamos varias barras horizontales dentro de main en z-index bajo content
    local barsHolder = new("Frame", {Parent = main, BackgroundTransparency = 1, Size = UDim2.new(1,0,1,0), Position = UDim2.new(0,0,0,0), ZIndex = 1})
    barsHolder.Name = "BarsHolder"
    barsHolder.ClipsDescendants = true
    gui.barsHolder = barsHolder

    local barCount = 12
    local barHeight = 1 / barCount
    for i = 1, barCount do
        local bar = new("Frame", {
            Parent = barsHolder,
            Name = "Bar"..i,
            Position = UDim2.new(0,0, (i-1)*barHeight, 0),
            Size = UDim2.new(0,0, barHeight, 0),
            BackgroundColor3 = Colors.Accent,
            BorderSizePixel = 0,
            ZIndex = 1
        })
        new("UICorner", {Parent = bar, CornerRadius = UDim.new(0,4)})
    end

    -- Hacer el main draggable desde cualquier parte del frame
    local dragging, dragInput, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    main.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = main.Position
            dragInput = input
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    main.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)

    -- Cerrar overlay con click en fuera (opcional)
    overlay.MouseButton1Click:Connect(function()
        -- si haces clic fuera, cerramos
        if gui and gui.animateClose then
            gui.animateClose()
        else
            if gui.screenGui then gui.screenGui:Destroy() end
        end
    end)
end

-- Animación de apertura (scanlines de izquierda a derecha en secuencia)
local function animateOpen()
    if not gui or not gui.main or not gui.barsHolder then return end
    local main = gui.main
    local barsHolder = gui.barsHolder
    gui.overlay.Visible = true
    -- reiniciar barras a 0 width
    for i, bar in ipairs(barsHolder:GetChildren()) do
        if bar:IsA("Frame") then
            bar.Size = UDim2.new(0,0, bar.Size.Y.Scale, 0)
            bar.Position = UDim2.new(0,0,bar.Position.Y.Scale,0)
        end
    end
    main.Size = UDim2.new(0,520,0,280) -- inicia más pequeño
    main.BackgroundTransparency = 1
    -- tween overlay in
    TweenService:Create(gui.overlay, TweenInfo.new(0.22, Enum.EasingStyle.Quad), {BackgroundTransparency = 0.5}):Play()
    -- escala main a tamaño final
    TweenService:Create(main, TweenInfo.new(0.26, Enum.EasingStyle.Back), {Size = UDim2.new(0,720,0,380), BackgroundTransparency = 0}):Play()
    -- animar barras secuencialmente (llenan de izquierda a derecha)
    local delayBetween = 0.03
    local duration = 0.26
    local bars = {}
    for i = 1, #gui.barsHolder:GetChildren() do
        local bar = gui.barsHolder:FindFirstChild("Bar"..i)
        if bar then table.insert(bars, bar) end
    end
    for i, bar in ipairs(bars) do
        delay((i-1)*delayBetween, function()
            TweenService:Create(bar, TweenInfo.new(duration, Enum.EasingStyle.Quad), {Size = UDim2.new(1,0, bar.Size.Y.Scale, 0)}):Play()
        end)
    end
end

-- Animación de cierre (invoca callback después de destruir)
local function animateClose(callback)
    if not gui or not gui.main or not gui.barsHolder then
        if gui and gui.screenGui then gui.screenGui:Destroy() end
        if callback then pcall(callback) end
        return
    end
    local main = gui.main
    local barsHolder = gui.barsHolder
    -- animar barras al revés (de derecha a izquierda contraer)
    local bars = {}
    for i = 1, #barsHolder:GetChildren() do
        local bar = barsHolder:FindFirstChild("Bar"..i)
        if bar then table.insert(bars, bar) end
    end
    local delayBetween = 0.02
    local duration = 0.18
    -- contraer en secuencia inversa
    for i = #bars, 1, -1 do
        local bar = bars[i]
        delay((#bars - i)*delayBetween, function()
            TweenService:Create(bar, TweenInfo.new(duration, Enum.EasingStyle.Quad), {Size = UDim2.new(0,0, bar.Size.Y.Scale, 0)}):Play()
        end)
    end
    -- shrink main y fade overlay
    TweenService:Create(main, TweenInfo.new(0.22, Enum.EasingStyle.Quad), {Size = UDim2.new(0,420,0,220), BackgroundTransparency = 1}):Play()
    TweenService:Create(gui.overlay, TweenInfo.new(0.22, Enum.EasingStyle.Quad), {BackgroundTransparency = 1}):Play()
    delay(0.26, function()
        if gui and gui.screenGui then
            pcall(function() gui.screenGui:Destroy() end)
            gui = {}
        end
        if callback then
            -- ejecutar callback en pcall para evitar errores
            pcall(callback)
        end
    end)
end

-- Exponer animateClose en gui para que botones la llamen
gui.animateClose = animateClose

-- Inicializar todo
createUI()
animateOpen()

-- Conectar X correctamente (si existe)
if gui.closeBtn then
    gui.closeBtn.MouseButton1Click:Connect(function()
        if gui and gui.animateClose then
            gui.animateClose()
        else
            if gui.screenGui then gui.screenGui:Destroy() end
        end
    end)
end

-- Cerrar con ESC
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.Escape then
        if gui and gui.animateClose then gui.animateClose() end
    end
end)
